{
    // Settings
    "passfail"      : false,  // Stop on first error.
    "maxerr"        : 100,    // Maximum error before stopping.
    "gcl"           : false,  // Make compatible with Google Closure Compiler
    "moz"           : false,  // Enable Mozilla Javascript extensions

    // Predefined globals whom JSHint will ignore.
    "browser"       : true,   // Standard browser globals e.g. 'window', 'document'.

    "node"          : true,
    "rhino"         : false,
    "couch"         : false,
    "phantom"       : false,
    "wsh"           : true,   // Windows Scripting Host.

    "jquery"        : true,
    "yui"           : false,
    "prototypejs"   : false,
    "mootools"      : false,
    "dojo"          : false,

    "worker"        : true,   // Web-Worker globals
    "nonstandard"   : false,  // Non-Standard browser globals e.g. escape and unescape

    "predef"        : [  // Extra globals.
        "define",
        "require",
        "requirejs",
        "describe",
        "it",
        "expect",
        "beforeEach",
        "waits",
        "runs"
    ],


    // Development
    "debug"         : false,  // Allow debugger statements e.g. browser breakpoints.
    "devel"         : true,   // Allow developments statements e.g. 'console.log();'.

    // EcmaScript 6
    "esnext"        : false,

    // EcmaScript 5
    "strict"        : false,  // Require 'use strict' pragma in every file.
    "globalstrict"  : false,  // Allow global "use strict" (also enables 'strict').

    // EcmaScript 3 - Conform to IE 6-9 envs
    "es3"           : false,

    // Bug prevention
    "asi"           : true,   // Tolerate Automatic Semicolon Insertion (no semicolons).
    "laxbreak"      : true,   // Tolerate unsafe line breaks e.g. 'return [\n] x' without semicolons.
    "bitwise"       : true,   // Prohibit bitwise operators (&, |, ^, etc.).
    "boss"          : true,   // Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments.
    "curly"         : true,   // Require {} for every new block or scope.
    "eqeqeq"        : true,   // Require triple equals i.e. '==='.
    "eqnull"        : false,  // Tolerate use of '== null'.
    "evil"          : false,  // Tolerate use of 'eval'.
    "expr"          : false,  // Tolerate 'ExpressionStatement' as Programs.
    "forin"         : false,  // Tolerate 'for in' loops without 'hasOwnPrototype' or 'hasOwnProperty'.
    "latedef"       : true,   // Prohibit variable use before definition.
    "loopfunc"      : false,  // Allow functions to be defined within loops.
    "noarg"         : true,   // Prohibit use of 'arguments.caller' and 'arguments.callee'.
    "scripturl"     : true,   // Tolerate script-targeted URLs such as 'javascript:...'
    "smarttabs"     : false,  // Tolerate mixed tabs and spaces when the latter are used for alignment only.
    "shadow"        : false,  // Allows re-define variables later in code e.g. 'var x=1; x=2;'.
    "supernew"      : false,  // Tolerate 'new function () { ... };' and 'new Object;'.
    "undef"         : true,   // Require all non-global variables be declared before they are used.
    "freeze"        : false,  // Prevent polluting native prototypes
    "unused"        : false,  // Tolerate when a var is defined but never used
    "funcscope"     : false,  // Tolerate when vars are declared inside control structures and then used outside them
    "iterator"      : true,   // Tolerate the __iterator__ property
    "notypeof"      : false,  // Tolerate invalid typeof operator values
    "proto"         : false,  // Tolerate __proto__ property
    "validthis"     : true,   // Tolerate use of 'this' reference in a non-constructor function
    "noyield"       : false,  // Tolerate generators with no yield statement

    // Styling preferences
    "camelcase"     : false,  // Force all variable names to use either camelCase style or UPPER_CASE with underscores
    "laxcomma"      : true,   // Tolerate leading commas
    "newcap"        : false,  // Require capitalization of all constructor functions e.g. 'new F()'.
    "noempty"       : true,   // Prohibit use of empty blocks.
    "nonew"         : true,   // Prohibit use of constructors for side-effects.
    "plusplus"      : false,  // Prohibit use of '++' & '--'.
    "sub"           : true,   // Tolerate all forms of subscript notation besides dot notation e.g. 'dict['key']' instead of 'dict.key'.
    "trailing"      : true,   // Prohibit trailing whitespaces.
    "indent"        : 4,      // Enforce specific tab width
    "nonbsp"        : false,  // Warn about "non-breaking whitespace" chars
    "lastsemic"     : false,  // Suppress warning about missing semicolon for a one-line block
    "multistr"      : true,   // Tolerate multi-line strings

    // "maxparams"     : 4,      // Set the max number of params allowed per function
    // "maxdepth"      : 4,      // Max number of nested code blocks (if statements)
    // "maxstatements" : 4,      // Max statements per function
    // "maxcomplexity" : 4,      // Max number of linearly independent paths (cyclomatic complexity) through your source
    // "maxlen"        : 80      // Max length for a line of code
}

/* vim: set ts=4 sw=4 tw=0 :*/
